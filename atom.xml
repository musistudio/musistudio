<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>musi&#39;s life</title>
  
  <subtitle>the blog of musi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://musii.life/"/>
  <updated>2020-04-24T10:49:01.807Z</updated>
  <id>https://musii.life/</id>
  
  <author>
    <name>musi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript的前世今生</title>
    <link href="https://musii.life/wiki/JavaScript%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html"/>
    <id>https://musii.life/wiki/JavaScript%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html</id>
    <published>2020-04-24T00:14:03.000Z</published>
    <updated>2020-04-24T10:49:01.807Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;JavaScript简史&quot;&gt;&lt;a href=&quot;#JavaScript简史&quot; class=&quot;headerlink&quot; title=&quot;JavaScript简史&quot;&gt;&lt;/a&gt;JavaScript简史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript由Brendan
        
      
    
    </summary>
    
    
      <category term="wiki" scheme="https://musii.life/categories/wiki/"/>
    
    
      <category term="w-JavaScript" scheme="https://musii.life/tags/w-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>也谈Unicode和UTF-8</title>
    <link href="https://musii.life/code/%E4%B9%9F%E8%B0%88Unicode%E5%92%8CUTF-8.html"/>
    <id>https://musii.life/code/%E4%B9%9F%E8%B0%88Unicode%E5%92%8CUTF-8.html</id>
    <published>2020-04-22T02:32:45.000Z</published>
    <updated>2020-04-22T11:32:15.411Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在学习字符集相关的内容，遂以此文进行记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Unicode&quot;&gt;&lt;a href=&quot;#Unicode&quot; class=&quot;headerlink&quot; title=&quot;Unicode&quot;&gt;&lt;/a&gt;Unicode&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;起源&lt;/p&gt;
&lt;p&gt;大家都知道计算机起源于美国，而美国人一开始通信用的是&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ASCII&lt;/a&gt;字符，其包含所有大小写字母和常用的英文标点符号，足够美国人使用。后来计算机在其他国家普及，由于语种多样性ASCII字符不再满足需要。于是便有了欧洲的ISO 8859以及中文的GBK编码。但这样就有一个问题，美国的计算机接受到来自中国的电子邮件后无法正常显示内容。为了解决这种各国编码规范不统一的问题，&lt;a href=&quot;https://en.wikipedia.org/wiki/The%20Unicode%20Consortium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Unicode Consortium&lt;/a&gt;指定了Unicode(也叫国际码)标准。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编码方式&lt;/p&gt;
&lt;p&gt;当前的Unicode使用16位的编码空间，每个字符占2字节，理论上最多可表示65536个字符。基本满足各种语言的使用。基本多文种平面的字符的编码为U+hhhh，每个h代表一个十六进制的数字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="charset" scheme="https://musii.life/tags/charset/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云代码托管平台托管博客图床</title>
    <link href="https://musii.life/%E6%8A%98%E8%85%BE/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A.html"/>
    <id>https://musii.life/%E6%8A%98%E8%85%BE/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A.html</id>
    <published>2020-04-11T02:51:47.000Z</published>
    <updated>2020-04-11T03:23:39.500Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;无折腾，不青春&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;博客的图床在试过QQ空间相册(防盗链)，百度网盘(时间限制)之后，发现还是需要一个稳定点的图床比较好。github够稳定但是网速是在不敢恭维，突然想起之前在做&lt;a href=&quot;https://github.com/musistudio/wukong-robot-install-script&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wukong-robot-install-script&lt;/a&gt;的时候我用用过&lt;a href=&quot;https://code.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云的代码托管平台&lt;/a&gt;进行仓库加速，使用的时候速度的确挺快的。那能不能使用这个来托管博客的图床呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="折腾" scheme="https://musii.life/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="图床" scheme="https://musii.life/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="阿里云" scheme="https://musii.life/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>学习的方法论一：知识溯源法</title>
    <link href="https://musii.life/%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BA%E4%B8%80%EF%BC%9A%E7%9F%A5%E8%AF%86%E6%BA%AF%E6%BA%90%E6%B3%95.html"/>
    <id>https://musii.life/%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BA%E4%B8%80%EF%BC%9A%E7%9F%A5%E8%AF%86%E6%BA%AF%E6%BA%90%E6%B3%95.html</id>
    <published>2020-04-10T05:35:41.000Z</published>
    <updated>2020-04-11T02:39:04.646Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有一千个读者，就有一千个哈姆雷特&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是知识溯源法&quot;&gt;&lt;a href=&quot;#什么是知识溯源法&quot; class=&quot;headerlink&quot; title=&quot;什么是知识溯源法&quot;&gt;&lt;/a&gt;什么是知识溯源法&lt;/h4&gt;&lt;p&gt;在学习本方法之前我们先来看看百度百科的定义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;溯源&lt;/em&gt;法是一种追究根源的逆向思维方式，也是一种以倒推的方式追寻原因而达到解决问题的工作方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解就是对知识的起源做一个探寻。计算机的历史距今也不算太久，第一台图灵完备的电子计算机ENIAC诞生于1946年，所以计算机编程的相关知识大多都是可溯源的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://musii.life/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="方法论" scheme="https://musii.life/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云oss部署Vue项目</title>
    <link href="https://musii.life/code/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91oss%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://musii.life/code/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91oss%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE.html</id>
    <published>2019-11-08T17:24:31.000Z</published>
    <updated>2020-04-09T07:50:23.063Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="vue" scheme="https://musii.life/tags/vue/"/>
    
      <category term="oss" scheme="https://musii.life/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置Vue前后端分离项目</title>
    <link href="https://musii.life/code/Nginx%E9%85%8D%E7%BD%AEVue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://musii.life/code/Nginx%E9%85%8D%E7%BD%AEVue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE.html</id>
    <published>2019-07-18T16:03:15.000Z</published>
    <updated>2020-04-09T07:51:17.127Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;项目概述&quot;&gt;&lt;a href=&quot;#项目概述&quot; class=&quot;headerlink&quot; title=&quot;项目概述&quot;&gt;&lt;/a&gt;项目概述&lt;/h4&gt;&lt;p&gt;项目后端采用Node.js提供RESTful API服务，监听3000端口。项目前端采用Vue，打包好的dist文件夹路径为&lt;strong&gt;/root/vue/&lt;/strong&gt;。使用Nginx做反向代理实现前后端分离。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="nginx" scheme="https://musii.life/tags/nginx/"/>
    
      <category term="vue" scheme="https://musii.life/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JS中的事件机制</title>
    <link href="https://musii.life/code/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6.html"/>
    <id>https://musii.life/code/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6.html</id>
    <published>2019-06-17T01:04:02.000Z</published>
    <updated>2020-04-09T07:51:07.580Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-ECMA的标准事件流&quot;&gt;&lt;a href=&quot;#1-ECMA的标准事件流&quot; class=&quot;headerlink&quot; title=&quot;1. ECMA的标准事件流&quot;&gt;&lt;/a&gt;1. ECMA的标准事件流&lt;/h4&gt;&lt;p&gt;ECMAScript的标准事件流共分为三个阶段: &lt;strong&gt;事件捕获阶段&lt;/strong&gt;、&lt;strong&gt;处于目标阶段&lt;/strong&gt;、&lt;strong&gt;事件冒泡阶段&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以下是一个简单的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;meta-keyword&quot;&gt;HTML&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;click&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="JavaScript" scheme="https://musii.life/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS的防抖和节流</title>
    <link href="https://musii.life/code/JS%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html"/>
    <id>https://musii.life/code/JS%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html</id>
    <published>2019-03-30T14:29:53.000Z</published>
    <updated>2020-04-09T07:50:58.971Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS的防抖和节流&quot;&gt;&lt;a href=&quot;#JS的防抖和节流&quot; class=&quot;headerlink&quot; title=&quot;JS的防抖和节流&quot;&gt;&lt;/a&gt;JS的防抖和节流&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前几天在面试的过程中有被问到在监听input输入事件向后台传递数据的时候要怎么优化，由于之前并没有关注性能这一块儿的问题(之前在学redis的时候有了解过使用redis做cache)于是就胡乱答了使用缓存。然后面试官前辈就提示我可以使用JS中的防抖(PS:面试全程非常nice，有回答不对的地方面试官都给我做了指正，感觉就像是在和前辈讨论技术问题)，之后我也有查阅相关资料，今天我们就来讨论一下防抖和节流&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="JavaScript" scheme="https://musii.life/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议补充</title>
    <link href="https://musii.life/code/HTTP%E5%8D%8F%E8%AE%AE%E8%A1%A5%E5%85%85.html"/>
    <id>https://musii.life/code/HTTP%E5%8D%8F%E8%AE%AE%E8%A1%A5%E5%85%85.html</id>
    <published>2019-03-27T02:44:31.000Z</published>
    <updated>2020-04-09T07:50:41.042Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上次我们对HTTP协议已经有了吃不的了解，今天我们就来继续学习一下HTTP协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;HTTP协议格式&lt;/p&gt;
&lt;p&gt;HTTP协议的格式大致可划分成一下几个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;ul&gt;
&lt;li&gt;Request line&lt;ul&gt;
&lt;li&gt;method&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;head&lt;/li&gt;
&lt;li&gt;body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response&lt;ul&gt;
&lt;li&gt;Response line&lt;ul&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;Status code&lt;/li&gt;
&lt;li&gt;Statis text&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;head&lt;/li&gt;
&lt;li&gt;body
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="HTTP" scheme="https://musii.life/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>代码里的后悔药——Git</title>
    <link href="https://musii.life/code/%E4%BB%A3%E7%A0%81%E9%87%8C%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E2%80%94%E2%80%94Git.html"/>
    <id>https://musii.life/code/%E4%BB%A3%E7%A0%81%E9%87%8C%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E2%80%94%E2%80%94Git.html</id>
    <published>2019-03-25T05:16:04.000Z</published>
    <updated>2020-04-09T07:50:12.556Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码里的后悔药—Git&quot;&gt;&lt;a href=&quot;#代码里的后悔药—Git&quot; class=&quot;headerlink&quot; title=&quot;代码里的后悔药—Git&quot;&gt;&lt;/a&gt;代码里的后悔药—Git&lt;/h2&gt;&lt;h4 id=&quot;1-什么是Git&quot;&gt;&lt;a href=&quot;#1-什么是Git&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Git&quot;&gt;&lt;/a&gt;1. 什么是Git&lt;/h4&gt;&lt;p&gt;git是版本管理工具的一种，常见的版本管理工具还有&lt;strong&gt;CVS&lt;/strong&gt;、&lt;strong&gt;SVN&lt;/strong&gt;等等。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件&lt;/p&gt;
&lt;h4 id=&quot;2-为什么要用Git&quot;&gt;&lt;a href=&quot;#2-为什么要用Git&quot; class=&quot;headerlink&quot; title=&quot;2. 为什么要用Git&quot;&gt;&lt;/a&gt;2. 为什么要用Git&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分布式版本管理工具，容灾性较强&lt;/li&gt;
&lt;li&gt;强大的分支和合并功能&lt;/li&gt;
&lt;li&gt;支持多人协同开发
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="git" scheme="https://musii.life/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议初探</title>
    <link href="https://musii.life/code/HTTP%E5%8D%8F%E8%AE%AE%E5%88%9D%E6%8E%A2.html"/>
    <id>https://musii.life/code/HTTP%E5%8D%8F%E8%AE%AE%E5%88%9D%E6%8E%A2.html</id>
    <published>2019-03-24T13:06:47.000Z</published>
    <updated>2020-04-09T07:50:37.901Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP协议初探&quot;&gt;&lt;a href=&quot;#HTTP协议初探&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议初探&quot;&gt;&lt;/a&gt;HTTP协议初探&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;HTTP(Hyper Text Transfer Protocol)即超文本传输协议，它的发展是万维网协会(World Wide Web Consortium)和Internet小组IETF(Internet Engineering Task Force)合作的结果，最终发布了一系列的RFC。RFC 1945定义了HTTP/1.0版本，其中最著名的就是RFC 2616，其定义了普遍使用的一个版本——HTTP 1.1         &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP协议是用于从www服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本，还确定传输文档中的哪一部分，以及哪部分内容首先显示等。&lt;/p&gt;
&lt;p&gt;HTTP是一个应用层协议，由请求和相应构成，是一个标准的C/S(客户端/服务器)模型。&lt;strong&gt;HTTP是一个无状态的协议&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://musii.life/categories/code/"/>
    
    
      <category term="HTTP" scheme="https://musii.life/tags/HTTP/"/>
    
  </entry>
  
</feed>
